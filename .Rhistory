#dfc2 <- filter(df1, cluster == 2)
#dfc3 <- filter(df1, cluster == 3)
# hist(dfc1$Glucose)
#dfc1 <- filter(df1, cluster == 1)
#dfc2 <- filter(df1, cluster == 2)
#dfc3 <- filter(df1, cluster == 3)
# hist(dfc1$Glucose)
# hist(dfc2$Glucose)
# c31 = 0
# c31 = 0
# c30 = 0
# c31 = 0
# c30 = 0
# c21 = 0
# c31 = 0
# c30 = 0
# c21 = 0
# c20 = 0
# c31 = 0
# c30 = 0
# c21 = 0
# c20 = 0
# c11 = 0
# c31 = 0
# c30 = 0
# c21 = 0
# c20 = 0
# c11 = 0
# c10 = 0
# c31 = 0
# c30 = 0
# c21 = 0
# c20 = 0
# c11 = 0
# c10 = 0
#
# c31 = 0
# c30 = 0
# c21 = 0
# c20 = 0
# c11 = 0
# c10 = 0
#
#
# c31 = 0
# c30 = 0
# c21 = 0
# c20 = 0
# c11 = 0
# c10 = 0
#
#
# for(i in 1:c_len) {
# c31 = 0
# c30 = 0
# c21 = 0
# c20 = 0
# c11 = 0
# c10 = 0
#
#
# for(i in 1:c_len) {
#   if(kmeans_results$cluster[i] == 3)
# c30 = 0
# c21 = 0
# c20 = 0
# c11 = 0
# c10 = 0
#
#
# for(i in 1:c_len) {
#   if(kmeans_results$cluster[i] == 3)
#   {
# c21 = 0
# c20 = 0
# c11 = 0
# c10 = 0
#
#
# for(i in 1:c_len) {
#   if(kmeans_results$cluster[i] == 3)
#   {
#     if(dat[i,c("Outcome")] == 1)
# c20 = 0
# c11 = 0
# c10 = 0
#
#
# for(i in 1:c_len) {
#   if(kmeans_results$cluster[i] == 3)
#   {
#     if(dat[i,c("Outcome")] == 1)
#     {
# c11 = 0
# c10 = 0
#
#
# for(i in 1:c_len) {
#   if(kmeans_results$cluster[i] == 3)
#   {
#     if(dat[i,c("Outcome")] == 1)
#     {
#       c31 = c31 + 1
# c10 = 0
#
#
# for(i in 1:c_len) {
#   if(kmeans_results$cluster[i] == 3)
#   {
#     if(dat[i,c("Outcome")] == 1)
#     {
#       c31 = c31 + 1
#     }
#
#
# for(i in 1:c_len) {
#   if(kmeans_results$cluster[i] == 3)
#   {
#     if(dat[i,c("Outcome")] == 1)
#     {
#       c31 = c31 + 1
#     }
#     else
#
# for(i in 1:c_len) {
#   if(kmeans_results$cluster[i] == 3)
#   {
#     if(dat[i,c("Outcome")] == 1)
#     {
#       c31 = c31 + 1
#     }
#     else
#     {
# for(i in 1:c_len) {
#   if(kmeans_results$cluster[i] == 3)
#   {
#     if(dat[i,c("Outcome")] == 1)
#     {
#       c31 = c31 + 1
#     }
#     else
#     {
#       c30 = c30 + 1
read_file <- function() {
dat = read.csv("./qoc_data.csv", sep = ",", header = FALSE)
return(dat)
}
direction<-function(x){
if(all(diff(x)>0)) return('Increasing')
if(all(diff(x)<0)) return('Decreasing')
return('Mixed')
}
data <- read_file()
colors = c("red", "orange", "green")
x <- c(1:12)
y <- as.numeric(as.vector(data[1,]))
plot(x,y, ylim=c(30,100), xlab="Months", ylab = "Size of Clusters" )
# first cluster line - high risk
points(x,y,type='o', pch=20, col="red")
# plot the lin regression line to understand the slope
high_risk_model <- lm(y ~ x)
n <- 3
mat <- matrix(ncol=2, nrow=n)
colnames(mat) <- c("Intercept", "Slope")
rownames(mat) <- c("high risk", "moderate risk" , "low risk")
mat[1,]  <- coef(high_risk_model)
abline(high_risk_model, col=colors[1], lty = 2)
for(i in 2:3)
{
x <- c(1:12)
y <- as.numeric(as.vector(data[i,]))
lines(x, y, col=colors[i],lty=2)
points(x,y,type='o', pch=20, col=colors[i])
temp_model <- lm(y ~ x)
mat[i,] <- coef(temp_model)
abline(temp_model, col=colors[i], lty = 2)
}
print(mat)
#direction(as.numeric(data[1,]))
#direction(as.numeric(data[1,]))
#direction(as.numeric(data[2,]))
library("factoextra")
source("read_diab_file.r")
source("get_filtered_data.r")
raw = 0
no_of_clusters = 3
if(raw == 1)
{
dat = read_diab_file()
}
if(raw == 0)
{
dat = get_filtered_data()
}
fviz_nbclust(dat, kmeans, method = "gap_stat")
raw = 1
no_of_clusters = 3
if(raw == 1)
{
dat = read_diab_file()
}
if(raw == 0)
{
dat = get_filtered_data()
}
fviz_nbclust(dat, kmeans, method = "gap_stat")
km.res <- kmeans(df, 3, nstart = 25)
km.res <- kmeans(dat, 3, nstart = 25)
fviz_cluster(km.res, dat,  geom = "point",
ellipse= FALSE, show.clust.cent = FALSE,
palette = "jco", ggtheme = theme_classic())
km.res
install.packages("fpc")
set.seed(123)
db <- fpc::dbscan(dat, eps = 0.15, MinPts = 5)
fviz_cluster(db, data = dat, stand = FALSE,
ellipse = FALSE, show.clust.cent = FALSE,
geom = "point",palette = "jco", ggtheme = theme_classic())
db
set.seed(123)
db <- fpc::dbscan(dat, eps = 0.1, MinPts = 3)
fviz_cluster(db, data = dat, stand = FALSE,
ellipse = FALSE, show.clust.cent = FALSE,
geom = "point",palette = "jco", ggtheme = theme_classic())
db <- fpc::dbscan(dat, eps = 0.1, MinPts = 3)
print(db)
fviz_nbclust(dat, kmeans, method = "gap_stat")
km.res
# result we see optimal number is 1, in our case that will not make any siginificant results
no_of_clusters = 3
km.res <- kmeans(dat, no_of_clusters, nstart = 25)
fviz_cluster(km.res, dat,  geom = "point",
ellipse= FALSE, show.clust.cent = FALSE,
palette = "jco", ggtheme = theme_classic())
for(xx in 1:no_of_clusters)
{
dfc <- filter(df1, cluster == xx)
cat("c",xx,":- Glucose range[", range(dfc$Glucose), "] BP range[",range(dfc$BloodPressure) ,"] Insulin range[",range(dfc$Insulin) ,"] BMI range[",range(dfc$BMI),"] Age range[",range(dfc$Age),"] ST range [",range(dfc$SkinThickness),"]  DPF range [",range(dfc$DiabetesPedigreeFunction),"]\r\n")
}
# result we see optimal number is 1, in our case that will not make any siginificant results
no_of_clusters = 2
km.res <- kmeans(dat, no_of_clusters, nstart = 25)
fviz_cluster(km.res, dat,  geom = "point",
ellipse= FALSE, show.clust.cent = FALSE,
palette = "jco", ggtheme = theme_classic())
for(xx in 1:no_of_clusters)
{
dfc <- filter(df1, cluster == xx)
cat("c",xx,":- Glucose range[", range(dfc$Glucose), "] BP range[",range(dfc$BloodPressure) ,"] Insulin range[",range(dfc$Insulin) ,"] BMI range[",range(dfc$BMI),"] Age range[",range(dfc$Age),"] ST range [",range(dfc$SkinThickness),"]  DPF range [",range(dfc$DiabetesPedigreeFunction),"]\r\n")
}
df1<-data.frame(dat,cluster=km.res$cluster)
for(xx in 1:no_of_clusters)
{
dfc <- filter(df1, cluster == xx)
cat("c",xx,":- Glucose range[", range(dfc$Glucose), "] BP range[",range(dfc$BloodPressure) ,"] Insulin range[",range(dfc$Insulin) ,"] BMI range[",range(dfc$BMI),"] Age range[",range(dfc$Age),"] ST range [",range(dfc$SkinThickness),"]  DPF range [",range(dfc$DiabetesPedigreeFunction),"]\r\n")
}
# result we see optimal number is 1, in our case that will not make any siginificant results
no_of_clusters = 3
km.res <- kmeans(dat, no_of_clusters, nstart = 25)
fviz_cluster(km.res, dat,  geom = "point",
ellipse= FALSE, show.clust.cent = FALSE,
palette = "jco", ggtheme = theme_classic())
df1<-data.frame(dat,cluster=km.res$cluster)
for(xx in 1:no_of_clusters)
{
dfc <- filter(df1, cluster == xx)
cat("c",xx,":- Glucose range[", range(dfc$Glucose), "] BP range[",range(dfc$BloodPressure) ,"] Insulin range[",range(dfc$Insulin) ,"] BMI range[",range(dfc$BMI),"] Age range[",range(dfc$Age),"] ST range [",range(dfc$SkinThickness),"]  DPF range [",range(dfc$DiabetesPedigreeFunction),"]\r\n")
}
set.seed(123)
db <- fpc::dbscan(dat, eps = 0.001, MinPts = 3)
print(db)
fviz_cluster(db, data = dat, stand = FALSE,
ellipse = FALSE, show.clust.cent = FALSE,
geom = "point",palette = "jco", ggtheme = theme_classic())
set.seed(123)
db <- fpc::dbscan(dat, eps = 0.0000001, MinPts = 3)
print(db)
fviz_cluster(db, data = dat, stand = FALSE,
ellipse = FALSE, show.clust.cent = FALSE,
geom = "point",palette = "jco", ggtheme = theme_classic())
dat
dat < - dat[,1:8]
dat <- dat[,1:8]
dat
dat <- dat[,1:8]
# Finding optimal no. of clusters using k-means
fviz_nbclust(dat, kmeans, method = "gap_stat")
# result we see optimal number is 1, in our case that will not make any siginificant results
no_of_clusters = 3
km.res <- kmeans(dat, no_of_clusters, nstart = 25)
fviz_cluster(km.res, dat,  geom = "point",
ellipse= FALSE, show.clust.cent = FALSE,
palette = "jco", ggtheme = theme_classic())
km.df1<-data.frame(dat,cluster=km.res$cluster)
for(xx in 1:no_of_clusters)
{
dfc <- filter(km.df1, cluster == xx)
cat("c",xx,":- Glucose range[", range(dfc$Glucose), "] BP range[",range(dfc$BloodPressure) ,"] Insulin range[",range(dfc$Insulin) ,"] BMI range[",range(dfc$BMI),"] Age range[",range(dfc$Age),"] ST range [",range(dfc$SkinThickness),"]  DPF range [",range(dfc$DiabetesPedigreeFunction),"]\r\n")
}
set.seed(123)
db <- fpc::dbscan(dat, eps = 0.0000001, MinPts = 3)
print(db)
fviz_cluster(db, data = dat, stand = FALSE,
ellipse = FALSE, show.clust.cent = FALSE,
geom = "point",palette = "jco", ggtheme = theme_classic())
install.packages("dbscan")
set.seed(123)
dbscan::kNNdistplot(dat, k =  5)
abline(h = 0.15, lty = 2)
set.seed(123)
dbscan::kNNdistplot(dat, k =  3)
abline(h = 0.15, lty = 2)
raw = 0
no_of_clusters = 3
if(raw == 1)
{
dat = read_diab_file()
}
if(raw == 0)
{
dat = get_filtered_data()
}
dat <- dat[,1:8]
# Finding optimal no. of clusters using k-means
fviz_nbclust(dat, kmeans, method = "gap_stat")
km.res <- kmeans(dat, no_of_clusters, nstart = 25)
fviz_cluster(km.res, dat,  geom = "point",
ellipse= FALSE, show.clust.cent = FALSE,
palette = "jco", ggtheme = theme_classic())
km.df1<-data.frame(dat,cluster=km.res$cluster)
for(xx in 1:no_of_clusters)
{
dfc <- filter(km.df1, cluster == xx)
cat("c",xx,":- Glucose range[", range(dfc$Glucose), "] BP range[",range(dfc$BloodPressure) ,"] Insulin range[",range(dfc$Insulin) ,"] BMI range[",range(dfc$BMI),"] Age range[",range(dfc$Age),"] ST range [",range(dfc$SkinThickness),"]  DPF range [",range(dfc$DiabetesPedigreeFunction),"]\r\n")
}
set.seed(123)
dbscan::kNNdistplot(dat, k =  3)
abline(h = 0.15, lty = 2)
db <- fpc::dbscan(dat, eps = 0.0000001, MinPts = 3)
print(db)
dbscan::kNNdistplot(dat, k =  3)
set.seed(123)
res <- dbscan::kNNdistplot(dat, k =  3)
res
res <- dbscan::kNNdistplot(dat, k =  3)
abline(h = 50, lty = 2)
db <- fpc::dbscan(dat, eps = 50, MinPts = 3)
print(db)
fviz_cluster(db, data = dat, stand = FALSE,
ellipse = FALSE, show.clust.cent = FALSE,
geom = "point",palette = "jco", ggtheme = theme_classic())
db
summary(db)
set.seed(123)
res <- dbscan::kNNdistplot(dat, k =  3)
abline(h = 50, lty = 2)
res <- dbscan::kNNdistplot(dat, k =  3)
abline(h = 60, lty = 2)
db <- fpc::dbscan(dat, eps = 60, MinPts = 3)
print(db)
fviz_cluster(db, data = dat, stand = FALSE,
ellipse = FALSE, show.clust.cent = FALSE,
geom = "point",palette = "jco", ggtheme = theme_classic())
summary(db)
summary(db)
db$cluster
summary(db)
km.df2<-data.frame(dat,cluster=db$cluster)
km.df2<-data.frame(dat,cluster=db$cluster)
for(xx in 1:no_of_clusters)
{
dfc <- filter(km.df1, cluster == xx)
cat("c",xx,":- Glucose range[", range(dfc$Glucose), "] BP range[",range(dfc$BloodPressure) ,"] Insulin range[",range(dfc$Insulin) ,"] BMI range[",range(dfc$BMI),"] Age range[",range(dfc$Age),"] ST range [",range(dfc$SkinThickness),"]  DPF range [",range(dfc$DiabetesPedigreeFunction),"]\r\n")
}
summary(db)
print(db)
km.df2<-data.frame(dat,cluster=db$cluster)
for(xx in 1:2)
{
dfc <- filter(km.df2, cluster == xx)
cat("c",xx,":- Glucose range[", range(dfc$Glucose), "] BP range[",range(dfc$BloodPressure) ,"] Insulin range[",range(dfc$Insulin) ,"] BMI range[",range(dfc$BMI),"] Age range[",range(dfc$Age),"] ST range [",range(dfc$SkinThickness),"]  DPF range [",range(dfc$DiabetesPedigreeFunction),"]\r\n")
}
km.df2<-data.frame(dat,cluster=db$cluster)
for(xx in 1:3)
{
dfc <- filter(km.df2, cluster == xx)
cat("c",xx,":- Glucose range[", range(dfc$Glucose), "] BP range[",range(dfc$BloodPressure) ,"] Insulin range[",range(dfc$Insulin) ,"] BMI range[",range(dfc$BMI),"] Age range[",range(dfc$Age),"] ST range [",range(dfc$SkinThickness),"]  DPF range [",range(dfc$DiabetesPedigreeFunction),"]\r\n")
}
km.df2<-data.frame(dat,cluster=db$cluster)
for(xx in 1:2)
{
dfc <- filter(km.df2, cluster == xx)
cat("c",xx,":- Glucose range[", range(dfc$Glucose), "] BP range[",range(dfc$BloodPressure) ,"] Insulin range[",range(dfc$Insulin) ,"] BMI range[",range(dfc$BMI),"] Age range[",range(dfc$Age),"] ST range [",range(dfc$SkinThickness),"]  DPF range [",range(dfc$DiabetesPedigreeFunction),"]\r\n")
}
{
dfc <- filter(km.df1, cluster == xx)
cat("c",xx,":- Glucose range[", range(dfc$Glucose), "] BP range[",range(dfc$BloodPressure) ,"] Insulin range[",range(dfc$Insulin) ,"] BMI range[",range(dfc$BMI),"] Age range[",range(dfc$Age),"] ST range [",range(dfc$SkinThickness),"]  DPF range [",range(dfc$DiabetesPedigreeFunction),"]\r\n")
}
set.seed(123)
res <- dbscan::kNNdistplot(dat, k =  3)
abline(h = 60, lty = 2)
db <- fpc::dbscan(dat, eps = 60, MinPts = 3)
print(db)
fviz_cluster(db, data = dat, stand = FALSE,
ellipse = FALSE, show.clust.cent = FALSE,
geom = "point",palette = "jco", ggtheme = theme_classic())
summary(db$cluster)
km.df2<-data.frame(dat,cluster=db$cluster)
for(xx in 1:2)
{
dfc <- filter(km.df2, cluster == xx)
cat("c",xx,":- Glucose range[", range(dfc$Glucose), "] BP range[",range(dfc$BloodPressure) ,"] Insulin range[",range(dfc$Insulin) ,"] BMI range[",range(dfc$BMI),"] Age range[",range(dfc$Age),"] ST range [",range(dfc$SkinThickness),"]  DPF range [",range(dfc$DiabetesPedigreeFunction),"]\r\n")
}
raw = 0
no_of_clusters = 3
if(raw == 1)
{
dat = read_diab_file()
}
if(raw == 0)
{
dat = get_filtered_data()
}
dat <- dat[,1:8]
# Finding optimal no. of clusters using k-means
fviz_nbclust(dat, kmeans, method = "gap_stat")
set.seed(123)
res <- dbscan::kNNdistplot(dat, k =  3)
abline(h = 60, lty = 2)
set.seed(123)
res <- dbscan::kNNdistplot(dat, k =  2)
abline(h = 60, lty = 2)
set.seed(123)
res <- dbscan::kNNdistplot(dat, k =  4)
abline(h = 60, lty = 2)
set.seed(123)
res <- dbscan::kNNdistplot(dat, k =  3)
abline(h = 60, lty = 2)
dat <- dat[,1:8]
# Finding optimal no. of clusters using k-means
fviz_nbclust(dat, kmeans, method = "gap_stat")
# random forest
library(randomForest)
library(caret)
library(tidyverse)  # data manipulation
source("read_diab_file.r")
source("get_filtered_data.r")
dat <- read_diab_file();
ind <- sample(2, nrow(dat), replace = TRUE, prob = c(0.7, 0.3)) # 70/30 training and test
train_data <- dat[ind == 1,]
test_data <- dat[ind == 2,]
nrow(train_data)
nrow(test_data)
set.seed(234)
rand <- randomForest(Outcome~., data=train_data) #, method = 'class' , parms = list(split = "information")
install.packages("randomForest")
# random forest
library(randomForest)
library(caret)
install.packages("caret")
# random forest
library(randomForest)
library(caret)
library(tidyverse)  # data manipulation
source("read_diab_file.r")
source("get_filtered_data.r")
dat <- read_diab_file();
ind <- sample(2, nrow(dat), replace = TRUE, prob = c(0.7, 0.3)) # 70/30 training and test
train_data <- dat[ind == 1,]
test_data <- dat[ind == 2,]
nrow(train_data)
nrow(test_data)
set.seed(234)
rand <- randomForest(Outcome~., data=train_data) #, method = 'class' , parms = list(split = "information")
pred1 <- predict(rand, test_data[-9],type="class" )
pred_new <- sapply(pred1, function(d) round(d, digits = 0))
confMatrix <- table(test_data$Outcome,pred_new)
accuracy <- sum(diag(confMatrix))/sum(confMatrix)
cat("accuracy:",accuracy,"%")
plot(rand)
varImpPlot(rand)
rand <- randomForest(Outcome~., data=train_data, ntree=100)
pred1 <- predict(rand, test_data[-9],type="class" )
pred_new <- sapply(pred1, function(d) round(d, digits = 0))
confMatrix <- table(test_data$Outcome,pred_new)
accuracy <- sum(diag(confMatrix))/sum(confMatrix)
cat("accuracy:",accuracy,"%")
plot(rand)
varImpPlot(rand)
dat <- read_diab_file();
ind <- sample(2, nrow(dat), replace = TRUE, prob = c(0.7, 0.3)) # 70/30 training and test
train_data <- dat[ind == 1,]
test_data <- dat[ind == 2,]
nrow(train_data)
nrow(test_data)
set.seed(234)
rand <- randomForest(Outcome~., data=train_data) #, method = 'class' , parms = list(split = "information")
pred1 <- predict(rand, test_data[-9],type="class" )
pred_new <- sapply(pred1, function(d) round(d, digits = 0))
confMatrix <- table(test_data$Outcome,pred_new)
accuracy <- sum(diag(confMatrix))/sum(confMatrix)
cat("accuracy:",accuracy,"%")
plot(rand)
varImpPlot(rand)
rand <- randomForest(Outcome~., data=train_data, ntree=250)
pred1 <- predict(rand, test_data[-9],type="class" )
pred_new <- sapply(pred1, function(d) round(d, digits = 0))
confMatrix <- table(test_data$Outcome,pred_new)
accuracy <- sum(diag(confMatrix))/sum(confMatrix)
cat("accuracy:",accuracy,"%")
plot(rand)
varImpPlot(rand)
