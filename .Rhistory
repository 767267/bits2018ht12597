cat("c",xx,":- Glucose range[", range(dfc$Glucose), "] BP range[",range(dfc$BloodPressure) ,"] Insulin range[",range(dfc$Insulin) ,"] BMI range[",range(dfc$BMI),"] Age range[",range(dfc$Age),"] ST range [",range(dfc$SkinThickness),"]  DPF range [",range(dfc$DiabetesPedigreeFunction),"]\r\n")
}
raw = 0
no_of_clusters = 3
if(raw == 1)
{
dat = read_diab_file()
}
if(raw == 0)
{
dat = get_filtered_data()
}
dat <- dat[,1:8]
# Finding optimal no. of clusters using k-means
fviz_nbclust(dat, kmeans, method = "gap_stat")
set.seed(123)
res <- dbscan::kNNdistplot(dat, k =  3)
abline(h = 60, lty = 2)
set.seed(123)
res <- dbscan::kNNdistplot(dat, k =  2)
abline(h = 60, lty = 2)
set.seed(123)
res <- dbscan::kNNdistplot(dat, k =  4)
abline(h = 60, lty = 2)
set.seed(123)
res <- dbscan::kNNdistplot(dat, k =  3)
abline(h = 60, lty = 2)
dat <- dat[,1:8]
# Finding optimal no. of clusters using k-means
fviz_nbclust(dat, kmeans, method = "gap_stat")
# random forest
library(randomForest)
library(caret)
library(tidyverse)  # data manipulation
source("read_diab_file.r")
source("get_filtered_data.r")
dat <- read_diab_file();
ind <- sample(2, nrow(dat), replace = TRUE, prob = c(0.7, 0.3)) # 70/30 training and test
train_data <- dat[ind == 1,]
test_data <- dat[ind == 2,]
nrow(train_data)
nrow(test_data)
set.seed(234)
rand <- randomForest(Outcome~., data=train_data) #, method = 'class' , parms = list(split = "information")
install.packages("randomForest")
# random forest
library(randomForest)
library(caret)
install.packages("caret")
# random forest
library(randomForest)
library(caret)
library(tidyverse)  # data manipulation
source("read_diab_file.r")
source("get_filtered_data.r")
dat <- read_diab_file();
ind <- sample(2, nrow(dat), replace = TRUE, prob = c(0.7, 0.3)) # 70/30 training and test
train_data <- dat[ind == 1,]
test_data <- dat[ind == 2,]
nrow(train_data)
nrow(test_data)
set.seed(234)
rand <- randomForest(Outcome~., data=train_data) #, method = 'class' , parms = list(split = "information")
pred1 <- predict(rand, test_data[-9],type="class" )
pred_new <- sapply(pred1, function(d) round(d, digits = 0))
confMatrix <- table(test_data$Outcome,pred_new)
accuracy <- sum(diag(confMatrix))/sum(confMatrix)
cat("accuracy:",accuracy,"%")
plot(rand)
varImpPlot(rand)
rand <- randomForest(Outcome~., data=train_data, ntree=100)
pred1 <- predict(rand, test_data[-9],type="class" )
pred_new <- sapply(pred1, function(d) round(d, digits = 0))
confMatrix <- table(test_data$Outcome,pred_new)
accuracy <- sum(diag(confMatrix))/sum(confMatrix)
cat("accuracy:",accuracy,"%")
plot(rand)
varImpPlot(rand)
dat <- read_diab_file();
ind <- sample(2, nrow(dat), replace = TRUE, prob = c(0.7, 0.3)) # 70/30 training and test
train_data <- dat[ind == 1,]
test_data <- dat[ind == 2,]
nrow(train_data)
nrow(test_data)
set.seed(234)
rand <- randomForest(Outcome~., data=train_data) #, method = 'class' , parms = list(split = "information")
pred1 <- predict(rand, test_data[-9],type="class" )
pred_new <- sapply(pred1, function(d) round(d, digits = 0))
confMatrix <- table(test_data$Outcome,pred_new)
accuracy <- sum(diag(confMatrix))/sum(confMatrix)
cat("accuracy:",accuracy,"%")
plot(rand)
varImpPlot(rand)
rand <- randomForest(Outcome~., data=train_data, ntree=250)
pred1 <- predict(rand, test_data[-9],type="class" )
pred_new <- sapply(pred1, function(d) round(d, digits = 0))
confMatrix <- table(test_data$Outcome,pred_new)
accuracy <- sum(diag(confMatrix))/sum(confMatrix)
cat("accuracy:",accuracy,"%")
plot(rand)
varImpPlot(rand)
library("factoextra")
source("read_diab_file.r")
source("get_filtered_data.r")
raw = 0
no_of_clusters = 3
if(raw == 1)
{
dat = read_diab_file()
}
if(raw == 0)
{
dat = get_filtered_data()
}
dat <- dat[,1:8]
# Finding optimal no. of clusters using k-means
fviz_nbclust(dat, kmeans, method = "gap_stat")
km.res <- kmeans(dat, no_of_clusters, nstart = 25)
fviz_cluster(km.res, dat,  geom = "point",
ellipse= FALSE, show.clust.cent = FALSE,
palette = "jco", ggtheme = theme_classic())
km.df1<-data.frame(dat,cluster=km.res$cluster)
for(xx in 1:no_of_clusters)
{
dfc <- filter(km.df1, cluster == xx)
cat("c",xx,":- Glucose range[", range(dfc$Glucose), "] BP range[",range(dfc$BloodPressure) ,"] Insulin range[",range(dfc$Insulin) ,"] BMI range[",range(dfc$BMI),"] Age range[",range(dfc$Age),"] ST range [",range(dfc$SkinThickness),"]  DPF range [",range(dfc$DiabetesPedigreeFunction),"]\r\n")
}
km.res <- kmeans(dat, no_of_clusters, nstart = 25)
fviz_cluster(km.res, dat,  geom = "point",
ellipse= FALSE, show.clust.cent = FALSE,
palette = "jco", ggtheme = theme_classic())
km.df1<-data.frame(dat,cluster=km.res$cluster)
for(xx in 1:no_of_clusters)
{
dfc <- filter(km.df1, cluster == xx)
cat("c",xx,":- Glucose range[", range(dfc$Glucose), "] BP range[",range(dfc$BloodPressure) ,"] Insulin range[",range(dfc$Insulin) ,"] BMI range[",range(dfc$BMI),"] Age range[",range(dfc$Age),"] ST range [",range(dfc$SkinThickness),"]  DPF range [",range(dfc$DiabetesPedigreeFunction),"]\r\n")
}
km.res
km.res$cluster
km.df1
km.df1<-data.frame(dat,cluster=km.res$cluster)
km.df1
for(xx in 1:no_of_clusters)
{
dfc <- filter(km.df1, cluster == xx)
cat("c",xx,":- Glucose range[", range(dfc$Glucose), "] BP range[",range(dfc$BloodPressure) ,"] Insulin range[",range(dfc$Insulin) ,"] BMI range[",range(dfc$BMI),"] Age range[",range(dfc$Age),"] ST range [",range(dfc$SkinThickness),"]  DPF range [",range(dfc$DiabetesPedigreeFunction),"]\r\n")
}
filter(km.df1, cluster == xx)
km.df1
xx
cluster
library("factoextra")
source("read_diab_file.r")
source("get_filtered_data.r")
raw = 0
no_of_clusters = 3
if(raw == 1)
{
dat = read_diab_file()
}
if(raw == 0)
{
dat = get_filtered_data()
}
dat <- dat[,1:8]
# Finding optimal no. of clusters using k-means
fviz_nbclust(dat, kmeans, method = "gap_stat")
dat
raw = 0
no_of_clusters = 3
if(raw == 1)
{
dat = read_diab_file()
}
if(raw == 0)
{
dat = get_filtered_data()
}
setwd("C:/BITS/bits2018ht12597")
library("factoextra")
source("read_diab_file.r")
source("get_filtered_data.r")
raw = 0
no_of_clusters = 3
if(raw == 1)
{
dat = read_diab_file()
}
if(raw == 0)
{
dat = get_filtered_data()
}
source("read_diab_file.r")
get_filtered_data <- function() {
dat <- read_diab_file()
dat <- filter(dat, Outcome == 1)
#dat <-  filter(dat, Glucose > 70)
mod_dat = filter(dat, (BloodPressure  != 0) & (Glucose != 0) & (BMI != 0))
return(mod_dat)
}
library("factoextra")
source("read_diab_file.r")
source("get_filtered_data.r")
raw = 0
no_of_clusters = 3
if(raw == 1)
{
dat = read_diab_file()
}
if(raw == 0)
{
dat = get_filtered_data()
}
raw = 1
no_of_clusters = 3
if(raw == 1)
{
dat = read_diab_file()
}
if(raw == 0)
{
dat = get_filtered_data()
}
dat <- dat[,1:8]
# Finding optimal no. of clusters using k-means
fviz_nbclust(dat, kmeans, method = "gap_stat")
km.res <- kmeans(dat, no_of_clusters, nstart = 25)
fviz_cluster(km.res, dat,  geom = "point",
ellipse= FALSE, show.clust.cent = FALSE,
palette = "jco", ggtheme = theme_classic())
km.df1 <- data.frame(dat,cluster=km.res$cluster)
for(xx in 1:no_of_clusters)
{
dfc <- filter(km.df1, cluster == xx)
cat("c",xx,":- Glucose range[", range(dfc$Glucose), "] BP range[",range(dfc$BloodPressure) ,"] Insulin range[",range(dfc$Insulin) ,"] BMI range[",range(dfc$BMI),"] Age range[",range(dfc$Age),"] ST range [",range(dfc$SkinThickness),"]  DPF range [",range(dfc$DiabetesPedigreeFunction),"]\r\n")
}
library("factoextra")
library("dplyr")
source("read_diab_file.r")
source("get_filtered_data.r")
raw = 1
no_of_clusters = 3
if(raw == 1)
{
dat = read_diab_file()
}
if(raw == 0)
{
dat = get_filtered_data()
}
dat <- dat[,1:8]
# Finding optimal no. of clusters using k-means
fviz_nbclust(dat, kmeans, method = "gap_stat")
km.res <- kmeans(dat, no_of_clusters, nstart = 25)
fviz_cluster(km.res, dat,  geom = "point",
ellipse= FALSE, show.clust.cent = FALSE,
palette = "jco", ggtheme = theme_classic())
km.df1 <- data.frame(dat,cluster=km.res$cluster)
for(xx in 1:no_of_clusters)
{
dfc <- filter(km.df1, cluster == xx)
cat("c",xx,":- Glucose range[", range(dfc$Glucose), "] BP range[",range(dfc$BloodPressure) ,"] Insulin range[",range(dfc$Insulin) ,"] BMI range[",range(dfc$BMI),"] Age range[",range(dfc$Age),"] ST range [",range(dfc$SkinThickness),"]  DPF range [",range(dfc$DiabetesPedigreeFunction),"]\r\n")
}
set.seed(123)
res <- dbscan::kNNdistplot(dat, k =  3)
abline(h = 60, lty = 2)
db <- fpc::dbscan(dat, eps = 60, MinPts = 6)
print(db)
fviz_cluster(db, data = dat, stand = FALSE,
ellipse = FALSE, show.clust.cent = FALSE,
geom = "point",palette = "jco", ggtheme = theme_classic())
raw = 0
no_of_clusters = 3
if(raw == 1)
{
dat = read_diab_file()
}
if(raw == 0)
{
dat = get_filtered_data()
}
dat <- dat[,1:8]
# Finding optimal no. of clusters using k-means
fviz_nbclust(dat, kmeans, method = "gap_stat")
km.res <- kmeans(dat, no_of_clusters, nstart = 25)
fviz_cluster(km.res, dat,  geom = "point",
ellipse= FALSE, show.clust.cent = FALSE,
palette = "jco", ggtheme = theme_classic())
km.df1 <- data.frame(dat,cluster=km.res$cluster)
for(xx in 1:no_of_clusters)
{
dfc <- filter(km.df1, cluster == xx)
cat("c",xx,":- Glucose range[", range(dfc$Glucose), "] BP range[",range(dfc$BloodPressure) ,"] Insulin range[",range(dfc$Insulin) ,"] BMI range[",range(dfc$BMI),"] Age range[",range(dfc$Age),"] ST range [",range(dfc$SkinThickness),"]  DPF range [",range(dfc$DiabetesPedigreeFunction),"]\r\n")
}
set.seed(123)
res <- dbscan::kNNdistplot(dat, k =  3)
abline(h = 60, lty = 2)
db <- fpc::dbscan(dat, eps = 70, MinPts = 6)
print(db)
res <- dbscan::kNNdistplot(dat, k =  3)
abline(h = 70, lty = 2)
db <- fpc::dbscan(dat, eps = 70, MinPts = 6)
print(db)
fviz_cluster(db, data = dat, stand = FALSE,
ellipse = FALSE, show.clust.cent = FALSE,
geom = "point",palette = "jco", ggtheme = theme_classic())
summary(db$cluster)
km.df2<-data.frame(dat,cluster=db$cluster)
for(xx in 1:2)
{
dfc <- filter(km.df2, cluster == xx)
cat("c",xx,":- Glucose range[", range(dfc$Glucose), "] BP range[",range(dfc$BloodPressure) ,"] Insulin range[",range(dfc$Insulin) ,"] BMI range[",range(dfc$BMI),"] Age range[",range(dfc$Age),"] ST range [",range(dfc$SkinThickness),"]  DPF range [",range(dfc$DiabetesPedigreeFunction),"]\r\n")
}
library(corrplot)
library(tidyverse)
library(BBmisc)
source("read_diab_file.r")
source("get_filtered_data.r")
raw = 0
if(raw == 1)
{
dat = read_diab_file()
}
if(raw == 0)
{
dat = get_filtered_data()
}
correlations = cor(dat[,2:8])
write.csv(correlations, "./correlations.csv")
corrplot.mixed(correlations, order="hclust", tl.col="black")
outGlucose <- boxplot(dat[,2:7])
outGlucose1 <- boxplot(dat[,"Glucose"])
hist(dat[,"Glucose"])
outInsulin <- boxplot(dat[,"Insulin"])
hist(dat[,"Insulin"])
valid_dat =  filter(dat, Glucose > 70 )
count(valid_dat)
hist(valid_dat[,"Glucose"])
correlations1 <- cor(valid_dat[,2:8])
corrplot.mixed(correlations1, order="hclust", tl.col="black")
dat3 = filter(valid_dat, Insulin > 0 )
corrplot.mixed(cor(dat3[,2:8]), order="hclust", tl.col="black")
library(tidyverse)  # data manipulation
library(cluster)    # clustering algorithms
library(factoextra) # clustering algorithms & visualization
source("read_diab_file.r")
source("get_filtered_data.r")
raw = 0
no_of_clusters = 3
if(raw == 1)
{
dat = read_diab_file()
}
if(raw == 0)
{
dat = get_filtered_data()
}
summary(dat)
dim(dat)
filter1 <- c(5,8,6)   # Insulin, Age, BMI > had good correlation with Glucose     - 0.71
filter2 <- c(5,8,6,3) # Insulin, Age, BMI, BP > had good correlation with Glucose - 0.66
filter3 <- c(5,8,6,4) # Insulin, Age, BMI, Skin Thickness > had good correlation with Glucose - 0.68
filter4 <- c(5,8,6,2) # Insulin, Age, BMI, Glucose
filter5 <- c(5,8,6,7)   # Insulin, Age, BMI, DPF
filter6 <- c(3,5,6)   # BP, Insulin, BMI
filter7 <- c(3,8,4,5)   # BP, Insulin, BMI
filter8 <- c(2,8,5)   # BP, Insulin, BMI
filter9 <- c(2,6,8)    # Glucose, BMI, Age
filter10 <- c(2,6,8 ,7)    # Glucose, BMI, Age, DPF
filtered_data = dat[,filter10]
run_kmeans <- function(xtimes)
{
kmeans <- lapply(seq_len(xtimes), function(i){
results <- kmeans(filtered_data,  no_of_clusters)
})
return(kmeans)
}
kmeans_all_results = run_kmeans(10)
perf <- sapply(kmeans_all_results, function(d) as.numeric(d["tot.withinss"]))
index <- which.min(perf)
kmeans_results = kmeans_all_results[[index]]
fviz_cluster(kmeans_results, data = filtered_data, iter.max = 10, nstart = 1, algorithm = "Hartigan-Wong", ellipse.type = "norm") #+
c_len = length(kmeans_results$cluster)
print(c_len)
df1<-data.frame(dat,cluster=kmeans_results$cluster)
for(xx in 1:no_of_clusters)
{
dfc <- filter(df1, cluster == xx)
cat("c",xx,":- Glucose range[", range(dfc$Glucose), "] BP range[",range(dfc$BloodPressure) ,"] Insulin range[",range(dfc$Insulin) ,"] BMI range[",range(dfc$BMI),"] Age range[",range(dfc$Age),"] ST range [",range(dfc$SkinThickness),"]  DPF range [",range(dfc$DiabetesPedigreeFunction),"]\r\n")
}
sil <- silhouette(kmeans_results$cluster, dist(filtered_data))
fviz_silhouette(sil)
# hists <- lapply(seq_len(3), function(i){
# hists <- lapply(seq_len(3), function(i){
#   dff <- filter(df1, cluster == i)
# hists <- lapply(seq_len(3), function(i){
#   dff <- filter(df1, cluster == i)
#   hists <- hist(dff$Age)
#dfc1 <- filter(df1, cluster == 1)
#dfc1 <- filter(df1, cluster == 1)
#dfc2 <- filter(df1, cluster == 2)
#dfc1 <- filter(df1, cluster == 1)
#dfc2 <- filter(df1, cluster == 2)
#dfc3 <- filter(df1, cluster == 3)
#dfc1 <- filter(df1, cluster == 1)
#dfc2 <- filter(df1, cluster == 2)
#dfc3 <- filter(df1, cluster == 3)
# hist(dfc1$Glucose)
#dfc1 <- filter(df1, cluster == 1)
#dfc2 <- filter(df1, cluster == 2)
#dfc3 <- filter(df1, cluster == 3)
# hist(dfc1$Glucose)
# hist(dfc2$Glucose)
# c31 = 0
# c31 = 0
# c30 = 0
# c31 = 0
# c30 = 0
# c21 = 0
# c31 = 0
# c30 = 0
# c21 = 0
# c20 = 0
# c31 = 0
# c30 = 0
# c21 = 0
# c20 = 0
# c11 = 0
# c31 = 0
# c30 = 0
# c21 = 0
# c20 = 0
# c11 = 0
# c10 = 0
# c31 = 0
# c30 = 0
# c21 = 0
# c20 = 0
# c11 = 0
# c10 = 0
#
# c31 = 0
# c30 = 0
# c21 = 0
# c20 = 0
# c11 = 0
# c10 = 0
#
#
# c31 = 0
# c30 = 0
# c21 = 0
# c20 = 0
# c11 = 0
# c10 = 0
#
#
# for(i in 1:c_len) {
# c31 = 0
# c30 = 0
# c21 = 0
# c20 = 0
# c11 = 0
# c10 = 0
#
#
# for(i in 1:c_len) {
#   if(kmeans_results$cluster[i] == 3)
filtered_data = dat[,filter9]
run_kmeans <- function(xtimes)
{
kmeans <- lapply(seq_len(xtimes), function(i){
results <- kmeans(filtered_data,  no_of_clusters)
})
return(kmeans)
}
kmeans_all_results = run_kmeans(10)
perf <- sapply(kmeans_all_results, function(d) as.numeric(d["tot.withinss"]))
index <- which.min(perf)
kmeans_results = kmeans_all_results[[index]]
fviz_cluster(kmeans_results, data = filtered_data, iter.max = 10, nstart = 1, algorithm = "Hartigan-Wong", ellipse.type = "norm") #+
c_len = length(kmeans_results$cluster)
print(c_len)
df1<-data.frame(dat,cluster=kmeans_results$cluster)
for(xx in 1:no_of_clusters)
{
dfc <- filter(df1, cluster == xx)
cat("c",xx,":- Glucose range[", range(dfc$Glucose), "] BP range[",range(dfc$BloodPressure) ,"] Insulin range[",range(dfc$Insulin) ,"] BMI range[",range(dfc$BMI),"] Age range[",range(dfc$Age),"] ST range [",range(dfc$SkinThickness),"]  DPF range [",range(dfc$DiabetesPedigreeFunction),"]\r\n")
}
filtered_data = dat[,filter9]
run_kmeans <- function(xtimes)
{
kmeans <- lapply(seq_len(xtimes), function(i){
results <- kmeans(filtered_data,  no_of_clusters)
})
return(kmeans)
}
kmeans_all_results = run_kmeans(10)
perf <- sapply(kmeans_all_results, function(d) as.numeric(d["tot.withinss"]))
index <- which.min(perf)
kmeans_results = kmeans_all_results[[index]]
fviz_cluster(kmeans_results, data = filtered_data, iter.max = 10, nstart = 1, algorithm = "Hartigan-Wong", ellipse.type = "norm") #+
c_len = length(kmeans_results$cluster)
print(c_len)
df1<-data.frame(dat,cluster=kmeans_results$cluster)
for(xx in 1:no_of_clusters)
{
dfc <- filter(df1, cluster == xx)
cat("c",xx,":- Glucose range[", range(dfc$Glucose), "] BP range[",range(dfc$BloodPressure) ,"] Insulin range[",range(dfc$Insulin) ,"] BMI range[",range(dfc$BMI),"] Age range[",range(dfc$Age),"] ST range [",range(dfc$SkinThickness),"]  DPF range [",range(dfc$DiabetesPedigreeFunction),"]\r\n")
}
sil <- silhouette(kmeans_results$cluster, dist(filtered_data))
fviz_silhouette(sil)
