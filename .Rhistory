library(factoextra) # clustering algorithms & visualization
source("read_diab_file.r")
no_of_clusters = 3
dat = read_diab_file()
dat =  filter(dat, Outcome == 1)
filtered_data = dat[,c(2,4)]
cluster_colors <- c("red", "orange" , "green")
run_kmeans <- function(xtimes)
{
min = 0
#for (x in 1:xtimes)
#{
#kmeans_results <- kmeans(filtered_data, no_of_clusters)
#print(x)
#}
kmeans <- lapply(seq_len(xtimes), function(i){
results <- kmeans(filtered_data, 3)
})
return(kmeans)
}
kmeans_all_results = run_kmeans(10)
perf <- sapply(kmeans_all_results, function(d) as.numeric(d["tot.withinss"]))
index <- which.min(perf)
kmeans_results = kmeans_all_results[[index]]
fviz_cluster(kmeans_results, data = filtered_data, iter.max = 10, nstart = 1, algorithm = "Hartigan-Wong", ellipse.type = "norm") #+
c_len = length(kmeans_results$cluster)
print(c_len)
sil <- silhouette(kmeans_results$cluster, dist(filtered_data))
fviz_silhouette(sil)
mydata <- filtered_data
boxplot(dat[,2])
outboxplot(dat[,c("Glucose")])
outboxplot(dat[,"Glucose"])
out <- boxplot(dat[,"Glucose"])
out
outGlucose <- boxplot(dat)
outGlucose
outGlucose1 <- boxplot(dat[,"Glucose"])
outGlucose1
outGlucose1 <- boxplot(dat[,"Glucose"])
outInsulin
outInsulin <- boxplot(dat[,"Insulin"])
outInsulin
outGlucose
outInsulin
outGlucose <- boxplot(dat)
count(dat[,"Insulin"]==0)
count(dat, "Insulin", "0")
dim(dat)
count(dat, "Insulin", "123")
count(dat, "Insulin", 0)
insdat =  filter(dat, Insulin > 0)
outInsulin <- boxplot(insdat[,"Insulin"])
insdat
insdat =  filter(dat, Insulin > 0 && Insulin < 400)
outInsulin <- boxplot(insdat[,"Insulin"])
insdat
insdat =  filter(dat, Insulin > 0 & Insulin < 400)
outInsulin <- boxplot(insdat[,"Insulin"])
insdat =  filter(dat, Insulin > 0 & Insulin < 100)
outInsulin <- boxplot(insdat[,"Insulin"])
#insdat =  filter(dat, Insulin > 0 & Insulin < 100)
outInsulin <- boxplot(insdat[,"Insulin"])
#insdat =  filter(dat, Insulin > 0 & Insulin < 100)
outInsulin <- boxplot(dat[,"Insulin"])
hist(dat[,"Insulin"])
outInsulin
outGlucose1 <- boxplot(dat[,"Glucose"])
hist(dat[,"Glucose"])
valid_dat =  filter(dat, Glucose > 65 )
valid_dat =  filter(dat, Glucose > 65 )
hist(valid_dat)
hist(valid_dat[,"Glucose"])
count(valid_dat)
count(dat)
hist(dat[,"Glucose"])
valid_dat =  filter(dat, Glucose > 80 )
count(valid_dat)
hist(valid_dat[,"Glucose"])
valid_dat =  filter(dat, Glucose > 70 )
count(valid_dat)
min(dat[,"Glucose"])
hist(dat[,"Insulin"])
count(dat, "Insulin", 0)
valid_dat =  filter(dat, Glucose > 70 )
count(valid_dat)
hist(valid_dat[,"Glucose"])
hist(valid_dat[,"Insulin"])
correlations <= cor(valid_dat[,2:8])
hist(valid_dat[,"Insulin"])
corrplot.mixed(correlations, order="hclust", tl.col="black")
correlations1 <= cor(valid_dat[,2:8])
hist(valid_dat[,"Insulin"])
corrplot.mixed(correlations1, order="hclust", tl.col="black")
correlations1 <- cor(valid_dat[,2:8])
corrplot.mixed(correlations1, order="hclust", tl.col="black")
dat3 = filter(valid_dat, Insulin > 0 )
dat3
corrplot.mixed(cor(dat3), order="hclust", tl.col="black")
corrplot.mixed(cor(dat3[,2:8]), order="hclust", tl.col="black")
hist(dat[,"Age"])
corrplot.mixed(cor(dat3[,2:8]), order="hclust", tl.col="black")
min(dat[,"Age"])
max(dat[,"Age"])
hist(dat[,"Age"])
min(dat3[,"Age"])
max(dat3[,"Age"])
dat3
summary(dat3)
#define Min-Max normalization function
min_max_norm <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
#apply Min-Max normalization to first four columns in iris dataset
dat_norm <- as.data.frame(lapply(dat[1:8], min_max_norm))
boxplot(dat_norm
boxplot(dat_norm)
boxplot(dat_norm)
#apply Min-Max normalization to first four columns in iris dataset
dat_norm <- as.data.frame(lapply(dat[1:8], min_max_norm))
dat_norm1 = normalize(dat, method = "standardize", range = c(5), margin = 1L, on.constant = "quiet")
boxplot(dat_norm,dat_norm1)
#apply Min-Max normalization to first four columns in iris dataset
dat_norm <- as.data.frame(lapply(dat[1:8], min_max_norm))
dat_norm1 = normalize(dat, method = "standardize", range = c(5), margin = 1L, on.constant = "quiet")
install.packages("BBmisc")
#apply Min-Max normalization to first four columns in iris dataset
dat_norm <- as.data.frame(lapply(dat[1:8], min_max_norm))
dat_norm1 = normalize(dat, method = "standardize", range = c(5), margin = 1L, on.constant = "quiet")
boxplot(dat_norm,valid_dat)
boxplot(dat_norm)
boxplot(valid_dat)
dat_norm
corrplot.mixed(cor(dat_norm[,2:8]), order="hclust", tl.col="black")
corrplot.mixed(correlations1, order="hclust", tl.col="black")
corrplot.mixed(cor(dat3[,2:8]), order="hclust", tl.col="black")
library(corrplot)
library(tidyverse)
source("read_diab_file.r")
dat = read_diab_file()
#define Min-Max normalization function
min_max_norm <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
#apply Min-Max normalization to first four columns in iris dataset
dat_norm <- as.data.frame(lapply(dat[1:8], min_max_norm))
boxplot(dat_norm)
boxplot(valid_dat)
corrplot.mixed(cor(dat_norm[,2:8]), order="hclust", tl.col="black")
library(corrplot)
library(tidyverse)
source("read_diab_file.r")
dat = read_diab_file()
#define Min-Max normalization function
min_max_norm <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
#apply Min-Max normalization to first four columns in iris dataset
dat_norm <- as.data.frame(lapply(dat[2:7], min_max_norm))
boxplot(dat_norm)
boxplot(valid_dat)
corrplot.mixed(cor(dat_norm[,2:8]), order="hclust", tl.col="black")
corrplot.mixed(cor(dat_norm[,2:7]), order="hclust", tl.col="black")
#apply Min-Max normalization to first four columns in iris dataset
dat_norm <- as.data.frame(lapply(dat[2:7], min_max_norm))
boxplot(dat_norm)
boxplot(valid_dat)
corrplot.mixed(cor(dat_norm[,2:7]), order="hclust", tl.col="black")
#apply Min-Max normalization to first four columns in iris dataset
dat_norm <- as.data.frame(lapply(dat[2:6], min_max_norm))
boxplot(dat_norm)
corrplot.mixed(cor(dat_norm), order="hclust", tl.col="black")
dat_norm
library(corrplot)
library(tidyverse)
source("read_diab_file.r")
library(BBmisc)
dat = read_diab_file()
display(dat.info(),dat.head())
correlations = cor(dat[,2:8])
write.csv(correlations, "./correlations.csv")
corrplot.mixed(correlations, order="hclust", tl.col="black")
outGlucose <- boxplot(dat[,])
count(dat)
outGlucose1 <- boxplot(dat[,"Glucose"])
hist(dat[,"Glucose"])
outInsulin <- boxplot(dat[,"Insulin"])
hist(dat[,"Insulin"])
count(dat, "Insulin", 0)
valid_dat =  filter(dat, Glucose > 70 )
count(valid_dat)
hist(valid_dat[,"Glucose"])
correlations1 <- cor(valid_dat[,2:8])
corrplot.mixed(correlations1, order="hclust", tl.col="black")
dat3 = filter(valid_dat, Insulin > 0 )
corrplot.mixed(cor(dat3[,2:8]), order="hclust", tl.col="black")
min(dat3[,"Age"])
max(dat3[,"Age"])
hist(dat[,"Age"])
summary(dat3)
count(dat)
outGlucose1 <- boxplot(dat[,"Glucose"])
hist(dat[,"Glucose"])
outInsulin <- boxplot(dat[,"Insulin"])
hist(dat[,"Insulin"])
count(dat, "Insulin", 0)
valid_dat =  filter(dat, Glucose > 70 )
count(valid_dat)
hist(valid_dat[,"Glucose"])
correlations1 <- cor(valid_dat[,2:8])
corrplot.mixed(correlations1, order="hclust", tl.col="black")
where(dat, Insuline == 0)
corrplot.mixed(correlations, order="hclust", tl.col="black")
correlations = cor(dat[,2:8])
write.csv(correlations, "./correlations.csv")
corrplot.mixed(correlations, order="hclust", tl.col="black")
valid_dat =  filter(dat, Glucose > 70 )
count(valid_dat)
hist(valid_dat[,"Glucose"])
correlations1 <- cor(valid_dat[,2:8])
corrplot.mixed(correlations1, order="hclust", tl.col="black")
dat3 = filter(valid_dat, Insulin > 0 )
corrplot.mixed(correlations, order="hclust", tl.col="black")
hist(dat)
boxplot(dat[,])
boxplot(dat[,2:7])
hist(dat[,"Insulin"])
setwd("C:/BITS/bits2018ht12597")
library(corrplot)
library(tidyverse)
library(BBmisc)
source("read_diab_file.r")
source("get_filtered_data.r")
raw = 0
if(raw == 1)
{
dat = read_diab_file()
}
if(raw == 0)
{
dat = get_filtered_data()
}
correlations = cor(dat[,2:8])
write.csv(correlations, "./correlations.csv")
corrplot.mixed(correlations, order="hclust", tl.col="black")
outGlucose <- boxplot(dat[,2:7])
outGlucose1 <- boxplot(dat[,"Glucose"])
hist(dat[,"Glucose"])
outInsulin <- boxplot(dat[,"Insulin"])
hist(dat[,"Insulin"])
valid_dat =  filter(dat, Glucose > 70 )
count(valid_dat)
hist(valid_dat[,"Glucose"])
correlations1 <- cor(valid_dat[,2:8])
corrplot.mixed(correlations1, order="hclust", tl.col="black")
dat3 = filter(valid_dat, Insulin > 0 )
corrplot.mixed(cor(dat3[,2:8]), order="hclust", tl.col="black")
min(dat3[,"Age"])
max(dat3[,"Age"])
hist(dat[,"Age"])
summary(dat3)
library(tidyverse)  # data manipulation
library(cluster)    # clustering algorithms
library(factoextra) # clustering algorithms & visualization
source("read_diab_file.r")
source("get_filtered_data.r")
library(tidyverse)  # data manipulation
library(cluster)    # clustering algorithms
library(factoextra) # clustering algorithms & visualization
source("read_diab_file.r")
source("get_filtered_data.r")
raw = 0
no_of_clusters = 3
if(raw == 1)
{
dat = read_diab_file()
}
if(raw == 0)
{
dat = get_filtered_data()
}
summary(dat)
dim(dat)
filter1 <- c(5,8,6)   # Insulin, Age, BMI > had good correlation with Glucose     - 0.71
filter2 <- c(5,8,6,3) # Insulin, Age, BMI, BP > had good correlation with Glucose - 0.66
filter3 <- c(5,8,6,4) # Insulin, Age, BMI, Skin Thickness > had good correlation with Glucose - 0.68
filter4 <- c(5,8,6,2) # Insulin, Age, BMI, Glucose
filter5 <- c(5,8,6,7)   # Insulin, Age, BMI, DPF
filter6 <- c(3,5,6)   # BP, Insulin, BMI
filter7 <- c(3,8,4,5)   # BP, Insulin, BMI
filter8 <- c(2,8,5)   # BP, Insulin, BMI
filter9 <- c(2,6,8)    # Glucose, BMI, Age
filter10 <- c(2,6,8 ,7)    # Glucose, BMI, Age, DPF
filtered_data = dat[,filter10]
run_kmeans <- function(xtimes)
{
kmeans <- lapply(seq_len(xtimes), function(i){
results <- kmeans(filtered_data,  no_of_clusters)
})
return(kmeans)
}
kmeans_all_results = run_kmeans(10)
perf <- sapply(kmeans_all_results, function(d) as.numeric(d["tot.withinss"]))
index <- which.min(perf)
kmeans_results = kmeans_all_results[[index]]
fviz_cluster(kmeans_results, data = filtered_data, iter.max = 10, nstart = 1, algorithm = "Hartigan-Wong", ellipse.type = "norm") #+
c_len = length(kmeans_results$cluster)
print(c_len)
df1<-data.frame(dat,cluster=kmeans_results$cluster)
for(xx in 1:no_of_clusters)
{
dfc <- filter(df1, cluster == xx)
cat("c",xx,":- Glucose range[", range(dfc$Glucose), "] BP range[",range(dfc$BloodPressure) ,"] Insulin range[",range(dfc$Insulin) ,"] BMI range[",range(dfc$BMI),"] Age range[",range(dfc$Age),"] ST range [",range(dfc$SkinThickness),"]  DPF range [",range(dfc$DiabetesPedigreeFunction),"]\r\n")
}
sil <- silhouette(kmeans_results$cluster, dist(filtered_data))
fviz_silhouette(sil)
library(fpp2)
read_file <- function() {
dat = read.csv("./qoc_data.csv", sep = ",", header = FALSE)
return(dat)
}
direction<-function(x){
if(all(diff(x)>0)) return('Increasing')
if(all(diff(x)<0)) return('Decreasing')
return('Mixed')
}
data <- read_file()
colors = c("red", "orange", "green")
x <- c(1:12)
y <- as.numeric(as.vector(data[1,]))
plot(x,y, ylim=c(30,100), xlab="Months", ylab = "Size of Clusters" )
# first cluster line - high risk
points(x,y,type='o', pch=20, col="red")
# plot the lin regression line to understand the slope
high_risk_model <- lm(y ~ x)
abline(high_risk_model, col=colors[1], lty = 2)
summary(high_risk_model)
for(i in 2:3)
{
x <- c(1:12)
y <- as.numeric(as.vector(data[i,]))
lines(x, y, col=colors[i],lty=2)
points(x,y,type='o', pch=20, col=colors[i])
abline(lm( y ~ x), col=colors[i], lty = 2)
}
direction(as.numeric(data[1,]))
direction(as.numeric(data[2,]))
coef(high_risk_model)
abline(high_risk_model, col=colors[1], lty = 2)
summary(high_risk_model)
for(i in 2:3)
{
x <- c(1:12)
y <- as.numeric(as.vector(data[i,]))
lines(x, y, col=colors[i],lty=2)
points(x,y,type='o', pch=20, col=colors[i])
temp_model <- lm( y ~ x)
abline(temp_model, col=colors[i], lty = 2)
coef(temp_model)
}
library(fpp2)
read_file <- function() {
dat = read.csv("./qoc_data.csv", sep = ",", header = FALSE)
return(dat)
}
direction<-function(x){
if(all(diff(x)>0)) return('Increasing')
if(all(diff(x)<0)) return('Decreasing')
return('Mixed')
}
data <- read_file()
colors = c("red", "orange", "green")
x <- c(1:12)
y <- as.numeric(as.vector(data[1,]))
plot(x,y, ylim=c(30,100), xlab="Months", ylab = "Size of Clusters" )
# first cluster line - high risk
points(x,y,type='o', pch=20, col="red")
# plot the lin regression line to understand the slope
high_risk_model <- lm(y ~ x)
coef(high_risk_model)
abline(high_risk_model, col=colors[1], lty = 2)
summary(high_risk_model)
for(i in 2:3)
{
x <- c(1:12)
y <- as.numeric(as.vector(data[i,]))
lines(x, y, col=colors[i],lty=2)
points(x,y,type='o', pch=20, col=colors[i])
temp_model <- lm( y ~ x)
abline(temp_model, col=colors[i], lty = 2)
coef(temp_model)
}
for(i in 2:3)
{
x <- c(1:12)
y <- as.numeric(as.vector(data[i,]))
lines(x, y, col=colors[i],lty=2)
points(x,y,type='o', pch=20, col=colors[i])
temp_model <- lm( y ~ x)
abline(temp_model, col=colors[i], lty = 2)
coef(temp_model)
}
for(i in 2:3)
{
x <- c(1:12)
y <- as.numeric(as.vector(data[i,]))
lines(x, y, col=colors[i],lty=2)
points(x,y,type='o', pch=20, col=colors[i])
temp_model <- lm( y ~ x)
abline(temp_model, col=colors[i], lty = 2)
coef(temp_model)
}
for(i in 2:3)
{
x <- c(1:12)
y <- as.numeric(as.vector(data[i,]))
lines(x, y, col=colors[i],lty=2)
points(x,y,type='o', pch=20, col=colors[i])
temp_model <- lm(y ~ x)
abline(temp_model, col=colors[i], lty = 2)
coef(temp_model)
}
library(fpp2)
read_file <- function() {
dat = read.csv("./qoc_data.csv", sep = ",", header = FALSE)
return(dat)
}
direction<-function(x){
if(all(diff(x)>0)) return('Increasing')
if(all(diff(x)<0)) return('Decreasing')
return('Mixed')
}
data <- read_file()
colors = c("red", "orange", "green")
x <- c(1:12)
y <- as.numeric(as.vector(data[1,]))
plot(x,y, ylim=c(30,100), xlab="Months", ylab = "Size of Clusters" )
# first cluster line - high risk
points(x,y,type='o', pch=20, col="red")
# plot the lin regression line to understand the slope
high_risk_model <- lm(y ~ x)
abline(high_risk_model, col=colors[1], lty = 2)
summary(high_risk_model)
for(i in 2:3)
{
x <- c(1:12)
y <- as.numeric(as.vector(data[i,]))
lines(x, y, col=colors[i],lty=2)
points(x,y,type='o', pch=20, col=colors[i])
temp_model <- lm(y ~ x)
abline(temp_model, col=colors[i], lty = 2)
coef(temp_model)
}
for(i in 2:3)
{
x <- c(1:12)
y <- as.numeric(as.vector(data[i,]))
lines(x, y, col=colors[i],lty=2)
points(x,y,type='o', pch=20, col=colors[i])
temp_model <- lm(y ~ x)
abline(temp_model, col=colors[i], lty = 2)
cat(coef(temp_model))
}
test.c[1] <- coef(high_risk_model)
n <- 3
mat <- matrix(ncol=2, nrow=n)
mat[1,]  <- coef(high_risk_model)
abline(high_risk_model, col=colors[1], lty = 2)
for(i in 2:3)
{
x <- c(1:12)
y <- as.numeric(as.vector(data[i,]))
lines(x, y, col=colors[i],lty=2)
points(x,y,type='o', pch=20, col=colors[i])
temp_model <- lm(y ~ x)
mat[i,] <- coef(temp_model)
abline(temp_model, col=colors[i], lty = 2)
}
print(mat)
n <- 3
mat <- matrix(ncol=2, nrow=n)
colnames(mat) <- c("Intercept", "Slope")
mat[1,]  <- coef(high_risk_model)
abline(high_risk_model, col=colors[1], lty = 2)
for(i in 2:3)
{
x <- c(1:12)
y <- as.numeric(as.vector(data[i,]))
lines(x, y, col=colors[i],lty=2)
points(x,y,type='o', pch=20, col=colors[i])
temp_model <- lm(y ~ x)
mat[i,] <- coef(temp_model)
abline(temp_model, col=colors[i], lty = 2)
}
print(mat)
n <- 3
mat <- matrix(ncol=2, nrow=n)
colnames(mat) <- c("Intercept", "Slope")
rownames(mat) <- c("high risk", "moderate risk" , "low risk")
mat[1,]  <- coef(high_risk_model)
abline(high_risk_model, col=colors[1], lty = 2)
for(i in 2:3)
{
x <- c(1:12)
y <- as.numeric(as.vector(data[i,]))
lines(x, y, col=colors[i],lty=2)
points(x,y,type='o', pch=20, col=colors[i])
temp_model <- lm(y ~ x)
mat[i,] <- coef(temp_model)
abline(temp_model, col=colors[i], lty = 2)
}
print(mat)
